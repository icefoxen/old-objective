Appending a D to a function means Destructive, it's like ! in Scheme.  It changes the arguments instead of returning a new thing.  It is mostly for when either case would be correct, but one might be explicitly more desirable (ie you don't want to use GC, or aren't).

-IO
FUNCS:
int2str
float2str
uint2str
char2str
str2int
str2float
printf
sprintf
eprintf
strprintf
format
sformat
eformat
strformat
getc
putc
print
println
printblk
read
readln
openFile
fileExists

CLASSES:
Stream
StringStream
MemStream
stdin
stdout
stderr


-Math
FUNCS:
sqrt
sin
cos
tan
asin
acos
atan
deg2rad
rad2deg
pow
square
gcd
lcm
isPos
isNeg
floor
ceil
log
ln
logn
truncate
round

CLASSES:
Bignum
Infnum
Cpx
Ratio
Float?

CONSTS:
Inf
NaN
e
pi


-Mem
FUNCS:
ptr2arr
arr2ptr
new
alloc
free
cpyMem
moveMem
gc
gcTune
gcOn (turning on and off the GC; if off, new acts just like alloc.)
gcOff
isGcOn


-Str
FUNCS:
concat
blit
blitConcat (aka concatD)
split
strip
stripD
sortStrings
sortStringsD
sortUnique
strLess
strGreater
strLE
strGE
istrLess (case-insensitive comparison)
istrGreater
istrLE
istrGE
isPrintable
isWhitespace
isNum
isAlpha
isAlphanum
isLower
isUpper
substr
substrD
slice
sliceD
index
rindex
containsStr
toUpper
toLower
capitalize
capitalizeD
trimLeft
trimLeftD
trimRight
trimLeftD
times (pythonish *)

VARS:
numbers
alphanum
printable
whitespace
alphabet


-Config
VARS:
Compiler
CompilerVersion
Platform
PlatformVersion
Machine
MachineVersion
LibVersion
wordsize
newlineChar
endianness

-Sys
args
argNum




Exceptions:
printExn( exn )
assert( bool )
Exceptions are a struct (or object...) with msg, name, file, and lineno fields.  Various types may have more, but printExn() prints all those.
NotFound
Failure
OutOfMem
CannotOpen
FloatingPointException
MathError
AssertFailed
InvalidInput
HorribleDeath
ImpossibleDeath



Data struct hierarchy:
Set
 HashTbl
 SkipList
 BinTree
Sequence
 Array
  Buffer
  ArrayList
 List
  Stack
  Queue
